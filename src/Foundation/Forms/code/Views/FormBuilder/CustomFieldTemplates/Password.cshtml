@using Sitecore.ExperienceForms.Mvc.Html
@using Sitecore.Globalization
@model Thread.Foundation.Forms.Models.PasswordViewModel

@{
    var passwordInputId = @Html.IdFor(m => Model.Value);
}
<label class="sc-form-item @if (Model.Required){<text>js-sc-form-required</text>}else{<text>sc-form-item--optional</text>}">
    <span class="@Model.LabelCssClass">@Html.DisplayTextFor(t => Model.Title)</span>
    <input id="@passwordInputId" name="@Html.NameFor(m => Model.Value)" class="@Model.CssClass" type="password" value="@Model.Value" 
           @if (Model.MaxLength > 0) { <text> maxlength="@Model.MaxLength" </text> } placeholder="@Model.PlaceholderText" data-sc-tracking="@Model.IsTrackingEnabled" data-sc-field-name="@Model.Name" data-sc-field-key="@Model.ConditionSettings.FieldKey" @Html.GenerateUnobtrusiveValidationAttributes(m => Model.Value) />
    @if (Model.ShowHidePassword)
    {
        <a href="#" class="sc-form-item__show-password" onclick="showPassword(event, '@passwordInputId');" data-input-id="@Html.IdFor(m => Model.Value)">@Translate.Text("Show password")</a>
    }
    <span role="alert" class="sc-form-item__error-msg">@Html.ValidationMessageFor(m => Model.Value)</span>
</label>

<script type="text/javascript">
    function showPassword(e, passwordInputId) {
        var passwordInput = document.getElementById(passwordInputId);
        var attr = passwordInput.getAttribute('type') === "text" ? "password" : "text"; 
        passwordInput.setAttribute('type', attr);

        e = e || window.event;
        e.preventDefault();
    }
</script>