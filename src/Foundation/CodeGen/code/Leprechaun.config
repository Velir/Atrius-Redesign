<?xml version="1.0" encoding="utf-8" ?>

<!--
	GETTING STARTED WITH LEPRECHAUN
	
	1. Make a COPY of this file to store your base Leprechaun configuration. 
		- This file should go in source control.
		- It can go anywhere under your project, in some global location (like say /src)
	2. Alter the Sample.Base configuration below, in your copy, to define the model conventions of your project.
		- Where to find serialized item files
		- Where generated code is stored
		- Which code generator(s) you want to use (e.g. Constants, Synthesis, etc)
		- Ignored field names
		- Use of variables ($(layer) and $(module)) allow you to define conventions once and reuse them on module configs,
			assuming module configs are named as 'Layer.Module'
	3. Define config files for each Helix module in your project. 
		- Normally these should be placed alongside the module's source code
		- These do not need to be deployed to the website at all
		- These are not Sitecore config patches. See the sample below in the 'import' comments.
	4. Alter the 'import' attribute on your base config file to find all your module configuration files
	5. Run `Leprechaun.Console.exe -c "path\to\Leprechaun.MyCopy.config"` to generate your code
	
	AVAILABLE VARIABLES IN CONFIG:
	$(layer) - the Helix-style layer of the configuration (assumes config is named Layer.Module)
	$(module) the Helix-style module of the configuration
	$(configurationName) - the full name of the configuration
	$(configDirectory) - the full path to the directory containing the root Leprechaun config file being used
	NOTE: variables cannot be used on the 'import' declaration. Paths there are always relative to $(configDirectory).
-->
<leprechaun>
	<!-- 
		Use the 'import' attribute to load module configurations from other files.
		This enables you to store modules' codegen configurations alongside their source for improved discoverability.
		
		Wildcards are allowed (* and **). Relative paths are allowed, and are relative to the base config file path.
		Multiple path globs are also allowed, semicolon delimited (e.g. c:\*\foo.config;d:\foo.config)
		
		A module configuration would normally 'extend' a base config defined here that embeds the project's conventions.
		For example, a module config file might contain:
		
<configuration name="Feature.ModuleName" extends="Sample.Base">
</configuration>

		Each configuration can override anything that is in defaults or the 'extends' configuration. For more info, see
		https://kamsar.net/index.php/2017/02/Unicorn-4-Part-III-Configuration-Enhancements/ (the technique is the same as Unicorn)
	-->
  <configurations import="..\..\..\*\*\code\CodeGen.config">
    <!--
			Base code generation configuration.
			Use this abstract configuration to override the <defaults> where needed.
			(leave defaults alone to make config upgrades simpler)
		-->
    <configuration name="Thread.Base" abstract="true">
      <codeGenerator scripts="Scripts/ThreadItem.csx, Scripts/RenderingParameters.csx, Scripts/Diagnostics.csx" outputFile="$(configDirectory)\..\..\..\$(layer)\$(module)\code\Templates.cs" />

      <dataStore physicalRootPath="$(configDirectory)\..\..\..\$(layer)\$(module)\serialization\always" />

      <templatePredicate rootNamespace="Thread.$(layer).$(module)" />

    </configuration>
  </configurations>

	<!-- Config shared across all configurations -->
	<shared name="Shared">
		<metadataGenerator type="Leprechaun.MetadataGeneration.StandardTemplateMetadataGenerator, Leprechaun" singleInstance="true">
      <fieldType id="{F1A3DBB2-63B6-45CE-A781-9DC3E122AB86}" type="custom=Thread.Foundation.Enumerations.OrientationItem" />
      <fieldType id="{CA2482FB-23A2-4CD9-BA43-201A29228B8E}" type="custom=Thread.Foundation.Theme.ColorPairingItem" />
      <fieldType id="{23241DE5-760D-420F-83CC-3A0F1EF26369}" type="custom=Thread.Foundation.Enumerations.RatioItem" />
      <fieldType id="{F26501B9-4CE7-4D6B-BBF6-605FF5865970}" type="custom=Thread.Foundation.Enumerations.OrientationItem" />
      <fieldType id="{5107FF88-CE34-4CBD-BF71-3D511C049FB0}" type="custom=Thread.Foundation.Theme.ThemeItem" />
      <fieldType id="{886360BF-3E31-4E30-B8B4-B440FAB7525C}" type="custom=Thread.Foundation.Enumerations.RatioItem" />
      <fieldType id="{2493A7F1-8AA8-4DF2-AC90-CD86732F5122}" type="custom=Thread.Foundation.Enumerations.TextAlignmentItem" />

      <!--
        <fieldType id="{BEF10252-EA97-4433-A7E3-D924796E3950}" type="custom=IEnumerable(IAuthor)" />
				<fieldType id="{d7b9c27c-79e3-42a7-9b46-bff652ef0981}" type="custom=IContent_Type" />
				<fieldType id="{BE5681B8-5CD7-429E-8676-DD9C73EA965C}" type="custom=Item" />
				
				<fieldType id="{B7265FDE-0FAC-48D5-BED3-CCA546FCC6BD}" type="custom=IColor" />
				<fieldType id="{9D35680B-D5B4-4977-8598-87437702A5E1}" type="custom=IColor" />
				<fieldType id="{9787E5BC-4117-49EF-830C-701A23E2B2A7}" type="custom=Thread.Foundation.Theme.IColor" />
				<fieldType id="{CAED5A05-B1FB-40C7-9EA0-D1031B1A70C7}" type="custom=Thread.Foundation.Enumerations.INumber_Of_Items" />
				<fieldType id="{DA90BA19-124B-4385-9BDF-455464B3CEE4}" type="custom=Thread.Foundation.Enumerations.INumber_Of_Columns" />
				<fieldType id="{F1A3DBB2-63B6-45CE-A781-9DC3E122AB86}" type="custom=Thread.Foundation.Enumerations.IOrientation" />
				<fieldType id="{642ab2a6-8b71-4553-8dfc-f737362d0779}" type="custom=Thread.Foundation.Enumerations.INumber_Of_Items" />
				<fieldType id="{6C54A7E4-CB8B-4F5C-838E-B784517C4CB7}" type="custom=ISocial_Media_Icon" />
				<fieldType id="{750276E5-5FFA-4AFE-9D5D-2DB3A199C7E4}" type="custom=Thread.Foundation.Enumerations.IState" />
        <fieldType id="{11A2A15B-52C4-4DC6-BB76-1150FCF05E69}" type="custom=IEnumerable(Thread.Foundation.Taxonomy.IContent_Type)" />
        <fieldType id="{CF77E1F2-C995-4FE2-A30C-61470EC48C1F}" type="custom=Velir.Search.Glass.ISort_Option" />
        
        -->
		</metadataGenerator>
		<!-- 
			You can disable the validators (not recommended) by adding the following attributes to the architectureValidator:
			  - allowFieldNamesIdenticalToTemplateName="true"
			  - allowNovelFieldNames="true"
		-->
		<architectureValidator type="Leprechaun.Validation.StandardArchitectureValidator, Leprechaun" allowFieldNamesIdenticalToTemplateName="true" singleInstance="true" />
		<architectureValidatorLogger type="Leprechaun.Validation.StandardArchitectureValidatorLogger, Leprechaun" singleInstance="true" />
		<logger type="Leprechaun.Console.ConsoleLogger, Leprechaun.Console" singleInstance="true" />
		
		<!-- This is a surrogate for Rainbow.config, if you have customized path lengths there change them here too. -->
		<rainbowSettings type="Leprechaun.Console.LeprechaunRainbowSettings, Leprechaun.Console"
						 serializationFolderPathMaxLength="150"
						 maxItemNameLengthBeforeTruncation="50"
						 singleInstance="false" />
	</shared>

	<!-- Defaults all configurations inherit unless overridden -->
	<defaults>
		<!--
			The code generator does what it sounds like. 
			Note the Roslyn codegen requires 'scripts' and 'outputFile' parameters which are not provided by default. 
		-->
		<codeGenerator type="Leprechaun.CodeGen.Roslyn.CSharpScriptCodeGenerator, Leprechaun.CodeGen.Roslyn" singleInstance="true" />
		
		<!-- The data store defines where to find serialized items on disk. This should match Unicorn. -->
		<dataStore physicalRootPath="$(configDirectory)\Unicorn\$(configurationName)" useDataCache="true" type="Rainbow.Storage.SerializationFileSystemDataStore, Rainbow" singleInstance="true"/>

		<!-- The template filter defines what items are included as templates from the data store. Should match up with Unicorn in both paths and names. -->
		<templatePredicate type="Leprechaun.Filters.StandardTemplatePredicate, Leprechaun" rootNamespace="$(layer).$(module)" singleInstance="true">
			<include name="Templates" path="/sitecore/templates/$(layer)/$(module)" />
		</templatePredicate>

		<fieldFilter type="Leprechaun.Filters.StandardFieldFilter, Leprechaun" singleInstance="true">
			<!-- 
				Excludes can either be field names (wildcards supported) or field IDs (e.g. <exclude fieldId="guid" />) 
				Note that these are TEMPLATE FIELD excludes (ignore on code generation), not excluding reading serialized item fields.
			-->
			<exclude name="__*" />
		</fieldFilter>

		<typeNameGenerator type="Thread.Foundation.CodeGen.FlatTypeNameGenerator, Thread.Foundation.CodeGen" singleInstance="true" namespaceRootPath="/sitecore/templates/Thread/$(layer)/$(module)" />
		<templateReader type="Leprechaun.TemplateReaders.DataStoreTemplateReader, Leprechaun" singleInstance="true" />

		<!-- This should match up with the Unicorn/Rainbow configuration -->
		<serializationFormatter type="Rainbow.Storage.Yaml.YamlSerializationFormatter, Rainbow.Storage.Yaml" singleInstance="true">
			<fieldFormatter type="Rainbow.Formatting.FieldFormatters.MultilistFormatter, Rainbow" />
			<fieldFormatter type="Rainbow.Formatting.FieldFormatters.XmlFieldFormatter, Rainbow" />
			<fieldFormatter type="Rainbow.Formatting.FieldFormatters.CheckboxFieldFormatter, Rainbow" />
		</serializationFormatter>

		<!-- Tells Rainbow to let all fields that are serialized through; we do our own field filtering as we need to filter by template fields not items -->
		<rainbowFieldFilter type="Leprechaun.Filters.RainbowNullFieldFilter, Leprechaun" singleInstance="true" />

		<logger type="Leprechaun.Console.ConsoleLogger, Leprechaun.Console" singleInstance="true" />
	</defaults>
</leprechaun>